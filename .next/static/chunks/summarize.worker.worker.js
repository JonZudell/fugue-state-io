/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/workers/summarize.worker.js":
/*!*****************************************!*\
  !*** ./src/workers/summarize.worker.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("const SAMPLE_BIN_SIZE = 4096;\nconst HALF_SAMPLE_BIN_SIZE = Math.floor(SAMPLE_BIN_SIZE / 2);\nconst WINDOW_FUNCTION = \"hamming\";\n\nfunction applyWindowFunction(data, windowType) {\n  const N = data.length;\n  switch (windowType) {\n    case \"hamming\":\n      return data.map(\n        (value, n) =>\n          value * (0.54 - 0.46 * Math.cos((2 * Math.PI * n) / (N - 1))),\n      );\n    case \"hann\":\n      return data.map(\n        (value, n) =>\n          value * (0.5 * (1 - Math.cos((2 * Math.PI * n) / (N - 1)))),\n      );\n    case \"blackman\":\n      return data.map(\n        (value, n) =>\n          value *\n          (0.42 -\n            0.5 * Math.cos((2 * Math.PI * n) / (N - 1)) +\n            0.08 * Math.cos((4 * Math.PI * n) / (N - 1))),\n      );\n    case \"rectangular\":\n      return data; // No windowing\n    case \"bartlett\":\n      return data.map(\n        (value, n) =>\n          value * (2 / (N - 1)) * ((N - 1) / 2 - Math.abs(n - (N - 1) / 2)),\n      );\n    default:\n      throw new Error(\"Unknown window type\");\n  }\n}\n\nfunction radix_4_fft(input) {\n  try {\n    const N = input.length;\n    if (N <= 1) return input;\n\n    // Handle radix-2 case\n    if (N === 2) {\n      return [input[0] + input[1], input[0] - input[1]];\n    }\n\n    // Ensure the input length is a power of 4\n    if ((N & (N - 1)) !== 0 || (N & 0x55555555) !== N) {\n      throw new Error(\"Input length must be a power of 4\");\n    }\n\n    // Split the input into four smaller arrays\n    const even = [],\n      odd = [],\n      even2 = [],\n      odd2 = [];\n    for (let i = 0; i < N / 4; i++) {\n      even.push(input[4 * i]);\n      odd.push(input[4 * i + 1]);\n      even2.push(input[4 * i + 2]);\n      odd2.push(input[4 * i + 3]);\n    }\n\n    // Recursively apply the radix-4 FFT to the smaller arrays\n    const evenFFT = radix_4_fft(even);\n    const oddFFT = radix_4_fft(odd);\n    const even2FFT = radix_4_fft(even2);\n    const odd2FFT = radix_4_fft(odd2);\n\n    // Combine the results using the butterfly operations\n    const result = new Array(N);\n    for (let k = 0; k < N / 4; k++) {\n      const t0 = evenFFT[k];\n      const t1 = oddFFT[k];\n      const t2 = even2FFT[k];\n      const t3 = odd2FFT[k];\n\n      const twiddle1 = Math.exp((-2 * Math.PI * k) / N);\n      const twiddle2 = Math.exp((-4 * Math.PI * k) / N);\n      const twiddle3 = Math.exp((-6 * Math.PI * k) / N);\n\n      result[k] = t0 + twiddle1 * t1 + twiddle2 * t2 + twiddle3 * t3;\n      result[k + N / 4] = t0 - twiddle1 * t1 + twiddle2 * t2 - twiddle3 * t3;\n      result[k + N / 2] = t0 + twiddle1 * t1 - twiddle2 * t2 - twiddle3 * t3;\n      result[k + (3 * N) / 4] =\n        t0 - twiddle1 * t1 - twiddle2 * t2 + twiddle3 * t3;\n    }\n\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\nfunction frameFromSlice(array, start, end) {\n  const data = array.slice(start, end);\n  return {\n    data: data,\n    start: start,\n    end: end,\n  };\n}\nfunction interleavedFramesFromChannelData(data) {\n  try {\n    data = new Float32Array(data);\n    const frames = [];\n    const interpolatedFrameCount = data.length / HALF_SAMPLE_BIN_SIZE;\n    console.log(\"Interpolated frame count:\", interpolatedFrameCount);\n    for (let i = 0; i < interpolatedFrameCount; i++) {\n      const start = i * HALF_SAMPLE_BIN_SIZE;\n      const end = Math.min(\n        i * HALF_SAMPLE_BIN_SIZE + SAMPLE_BIN_SIZE,\n        data.length,\n      );\n      const frame = frameFromSlice(data, start, end);\n      frames.push(frame);\n    }\n\n    return frames;\n  } catch (error) {\n    console.error(\"Error in interleavedFramesFromChannelData:\", error);\n    throw error;\n  }\n}\n\nfunction summarizeFrame(frame) {\n  try {\n    const count = frame.data.length;\n    const max = Math.max(...frame.data);\n    const min = Math.min(...frame.data);\n    const avg = frame.data.reduce((a, b) => a + b, 0) / count;\n    const input = new Array(SAMPLE_BIN_SIZE).fill(0);\n    // Apply windowing function before transforming\n    const windowedData = applyWindowFunction(frame.data, WINDOW_FUNCTION);\n\n    windowedData.forEach((value, index) => {\n      input[index] = value;\n    });\n    const output = radix_4_fft(input);\n    const magnitudes = [];\n    for (let i = 0; i < output.length; i += 2) {\n      magnitudes.push(Math.sqrt(output[i] ** 2 + output[i + 1] ** 2));\n    }\n\n    return {\n      max: max,\n      min: min,\n      avg: avg,\n      fft: output,\n      magnitudes: magnitudes,\n    };\n  } catch (error) {\n    console.error(\"Error in summarizeFrame:\", error);\n    throw error;\n  }\n}\n\nfunction summarizeInterleavedFrames(frames, channel, id, postMessage) {\n  try {\n    console.log(\"Summarizing frames\", frames);\n    let lastFrame = summarizeFrame(frames[0]);\n    postMessage({\n      type: \"CHANNEL_PROGRESS\",\n      id: id,\n      channel: channel,\n      progress: 0,\n    });\n\n    const summarizedFrames = [];\n\n    let ndx = 0;\n\n    while (ndx < frames.length) {\n      const summarizedFrame = summarizeFrame(frames[ndx]);\n      const thisFrame = { ...summarizedFrames[ndx] };\n\n      thisFrame.max = (lastFrame.max + summarizedFrame.max) / 2;\n      thisFrame.min = (lastFrame.min + summarizedFrame.min) / 2;\n      thisFrame.avg = (lastFrame.avg + summarizedFrame.avg) / 2;\n      thisFrame.fft = lastFrame.fft.map(\n        (value, index) => (value + summarizedFrame.fft[index]) / 2,\n      );\n      thisFrame.magnitudes = lastFrame.magnitudes.map(\n        (value, index) => (value + summarizedFrame.magnitudes[index]) / 2,\n      );\n\n      summarizedFrames.push(thisFrame);\n      lastFrame = summarizedFrame;\n      if (ndx % 100 === 0) {\n        postMessage({\n          type: \"CHANNEL_PROGRESS\",\n          channel: channel,\n          progress: ndx / frames.length,\n          id: id,\n        });\n      }\n      ndx++;\n    }\n    return summarizedFrames;\n  } catch (error) {\n    console.error(\"Error in summarizeInterleavedFrames:\", error);\n    throw error;\n  }\n}\n\nfunction process(arrayBuffer, channel, id, postMessage) {\n  try {\n    console.log(\"Processing arrayBuffer:\", arrayBuffer, channel);\n    const frames = interleavedFramesFromChannelData(arrayBuffer);\n    console.log(\"Interleaved frames:\", frames, channel);\n    const summarizedFrames = summarizeInterleavedFrames(\n      frames,\n      channel,\n      id,\n      postMessage,\n    );\n    postMessage({\n      type: \"CHANNEL_PROGRESS\",\n      channel: channel,\n      id: id,\n      progress: 1,\n    });\n    postMessage({\n      type: \"SUMMARIZED\",\n      summary: summarizedFrames,\n      id: id,\n      channel: channel,\n    });\n  } catch (error) {\n    console.error(\n      \"Error in process_file (audioContext.decodeAudioData):\",\n      error,\n    );\n    postMessage({ type: \"error\", error });\n  }\n}\nfunction checkReady(postMessage) {\n  try {\n    postMessage({ type: \"READY\" });\n  } catch (error) {\n    console.error(\"Error in checkReady:\", error);\n    postMessage({ type: \"error\", error });\n  }\n}\n\nself.addEventListener(\"message\", (event) => {\n  try {\n    console.log(\"Worker received message:\", event.data);\n    if (event.data && event.data.type === \"SUMMARIZE\") {\n      process(\n        event.data.arrayBuffer,\n        event.data.channel,\n        event.data.mediaId,\n        self.postMessage,\n      );\n    } else if (event.data && event.data.type === \"CHECK_READY\") {\n      checkReady(self.postMessage);\n    }\n  } catch (error) {\n    console.error(\"Error in message event listener:\", error);\n    self.postMessage({ type: \"error\", error });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/workers/summarize.worker.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	(() => {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = () => {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: (script) => (script)
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	(() => {
/******/ 		__webpack_require__.ts = (script) => (__webpack_require__.tt().createScript(script));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	(() => {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push((options) => {
/******/ 			const originalFactory = options.factory;
/******/ 			options.factory = (moduleObject, moduleExports, webpackRequire) => {
/******/ 				const hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				const cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : () => {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/workers/summarize.worker.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;